// scripts/test-connection.js
/**
 * This script tests and fixes database connections
 */
const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('Database Connection Test & Fix Script');
console.log('====================================');

// Try a simple database connection using properly formatted postgres URL
async function testConnection() {
  try {
    // Try to dynamically import PrismaClient
    const { PrismaClient } = await import('@prisma/client');
    
    // Use a known-good connection string for testing
    const prisma = new PrismaClient({
      datasources: {
        db: {
          url: process.env.DATABASE_URL,
        },
      },
    });
    
    console.log('Attempting to connect to the database...');
    // Try a simple query
    const result = await prisma.$queryRaw`SELECT 1 as test`;
    console.log('Connected successfully! Test query result:', result);
    
    // Disconnect properly
    await prisma.$disconnect();
    
    return true;
  } catch (error) {
    console.error('Database connection error:', error);
    return false;
  }
}

// Update the .env file with proper connection strings
function fixEnvFile() {
  console.log('\nFixing database connection strings in .env file...');
  
  // Create a safe database URL with properly encoded special characters
  // Note: This would be an actual password in a real scenario
  const encodedPassword = 'testpassword123'; 
  
  const localDbUrl = `postgresql://postgres:${encodedPassword}@localhost:5432/postgres`;
  
  // Try to read the current .env file
  const envPath = path.join(__dirname, '../.env');
  let envContent = '';
  
  try {
    if (fs.existsSync(envPath)) {
      envContent = fs.readFileSync(envPath, 'utf8');
      console.log('Read existing .env file');
    }
  } catch (error) {
    console.error('Error reading .env file:', error);
    envContent = '# Generated by test-connection.js\n';
  }
  
  // Create updated content with proper URLs
  const updatedContent = envContent
    .replace(
      /DATABASE_URL=.*$/m, 
      `DATABASE_URL="${localDbUrl}"`
    )
    .replace(
      /DIRECT_URL=.*$/m, 
      `DIRECT_URL="${localDbUrl}"`
    );
  
  // Write the updated content back to .env
  try {
    fs.writeFileSync(envPath, updatedContent);
    console.log('Updated .env file with safe database URLs');
    return true;
  } catch (error) {
    console.error('Error writing .env file:', error);
    return false;
  }
}

// Regenerate Prisma client
function regeneratePrismaClient() {
  console.log('\nRegenerating Prisma client...');
  
  try {
    execSync('npx prisma generate', { stdio: 'inherit' });
    console.log('Prisma client generated successfully');
    return true;
  } catch (error) {
    console.error('Error generating Prisma client:', error);
    return false;
  }
}

// Main function
async function main() {
  // First try to connect with current settings
  console.log('Trying connection with current settings...');
  const initialConnectionSuccessful = await testConnection();
  
  if (initialConnectionSuccessful) {
    console.log('\n✅ Database connection works with current settings!');
    return;
  }
  
  // If connection failed, try to fix the environment variables
  console.log('\n❌ Connection failed with current settings. Attempting to fix...');
  
  // Fix the .env file
  const envFixed = fixEnvFile();
  if (!envFixed) {
    console.error('\n❌ Failed to fix .env file. Please update it manually.');
    process.exit(1);
  }
  
  // Regenerate Prisma client
  const clientRegenerated = regeneratePrismaClient();
  if (!clientRegenerated) {
    console.error('\n❌ Failed to regenerate Prisma client. Try running "npx prisma generate" manually.');
    process.exit(1);
  }
  
  // Try connection again with fixed settings
  console.log('\nTrying connection with fixed settings...');
  const fixedConnectionSuccessful = await testConnection();
  
  if (fixedConnectionSuccessful) {
    console.log('\n✅ Database connection fixed successfully!');
  } else {
    console.error('\n❌ Still unable to connect to the database after fixes.');
    console.error('Please check your PostgreSQL server and connection settings manually.');
    process.exit(1);
  }
}

// Run the main function
main().catch(error => {
  console.error('Unexpected error:', error);
  process.exit(1);
});
